import React, { useEffect, useRef, useState } from 'react';
import Santa from '../../../../public/assets/Santa.svg';
import Tree from '../../../../public/assets/Obstacle.svg';
import Ground from '../../../assets/images/ground.png';
import Cloud from '../../../assets/images/cloud.png';

const Dino: React.FC = () => {
  const [score, setScore] = useState(0);
  const scoreRef = useRef(0);
  const [gameStarted, setGameStarted] = useState(false);

  const resetGame = () => {
    setScore(0);
    scoreRef.current = 0;
    setGameStarted(false);
  };

  useEffect(() => {
    const canvas = document.querySelector<HTMLCanvasElement>('#canvas');
    if (!canvas) throw new Error('Canvas element not found');
    const ctx = canvas.getContext('2d');
    if (!ctx) throw new Error('Failed to get canvas rendering context');

    canvas.width = 576;
    canvas.height = window.innerHeight - 100;

    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    const img2 = new Image();
    img2.src = Santa;

    const img1 = new Image();
    img1.src = Tree;

    const ground = new Image();
    ground.src = Ground;

    const cloud = new Image();
    cloud.src = Cloud;

    // ÏÇ∞ÌÉÄ Í∞ùÏ≤¥ ÌÉÄÏûÖ Ï†ïÏùò
    interface Drawable {
      x: number;
      y: number;
      width: number;
      height: number;
      draw(): void;
    }

    // ÏÇ∞ÌÉÄ Í∞ùÏ≤¥
    const santa: Drawable = {
      x: 10,
      y: 200,
      width: 50,
      height: 50,
      draw() {
        ctx.drawImage(img2, this.x, this.y, this.width, this.height);
      },
    };

    // Ïû•Ïï†Î¨º ÌÅ¥ÎûòÏä§
    class Obstacle implements Drawable {
      x: number;
      y: number;
      width: number;
      height: number;

      constructor() {
        this.x = 600;
        this.y = 200;
        this.width = 50;
        this.height = 50;
      }

      draw() {
        ctx?.drawImage(img1, this.x, this.y, this.width, this.height);
      }
    }

    // Í≤åÏûÑ ÏÉÅÌÉú Í¥ÄÎ¶¨ Î≥ÄÏàò
    let timer = 0;
    let jumptimer = 0;
    const trees: Obstacle[] = [];
    let animation: number;
    let isJumping = false;

    const gameoverMessage = (score: number): string => {
      if (score <= 20) {
        return `Í≤®Ïö∞ ${score}Ï†ê? ÏßÑÏßú Í∑∏ Ï†ïÎèÑÎ∞ñÏóê Î™ªÌï¥?ü§≠`;
      } else if (score <= 40) {
        return `${score}Ï†ê? Î≠ê Ï¢Ä ÌïòÍ∏¥ ÌïòÎÑ§ ÌïòÏßÄÎßå Ïù¥Í±¥ Í∏∞Î≥∏Ïù¥ÏßÄüòè`;
      } else if (score < 80) {
        return `${score}Ï†ê? Í¥úÏ∞ÆÍ∏¥ ÌïúÎç∞, 80Ï†êÏùÄ ÎÑòÍ≤®ÏïºÏßÄ~ 80Ï†ê ÎÑòÍ∏∞Î©¥ Ïù∏Ï†ïÌï¥Ï§ÑÍ≤å!`;
      } else if (score >= 80) {
        return `${score}Ï†ê? Ïù¥Ï†ú ÏßÑÏßú Ïã§Î†•Ïù∏Í∞Ä? Ïù¥ Ï†ïÎèÑÎ©¥ Ïù∏Ï†ïÌïúÎã§üëè`;
      }
      return '';
    };

    // Ï∂©Îèå Ï≤¥ÌÅ¨ Ìï®Ïàò
    const crush = (santa: Drawable, obstacle: Drawable): void => {
      const xdif = obstacle.x - (santa.x + santa.width * 0.75);
      const ydif = obstacle.y - (santa.y + santa.height);

      if (xdif < 0 && ydif < 0) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        cancelAnimationFrame(animation);
        alert(gameoverMessage(scoreRef.current));
        resetGame();
      }
    };

    // Í≤åÏûÑ Î£®ÌîÑ
    const frame = (): void => {
      if (!gameStarted) return;

      animation = requestAnimationFrame(frame);
      timer++;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Î∞∞Í≤Ω Í∑∏Î¶¨Í∏∞ (Íµ¨Î¶ÑÍ≥º ÎïÖ)
      ctx.drawImage(cloud, 0, 0, canvas.width, 80); // Íµ¨Î¶Ñ Î∞∞Í≤Ω
      ctx.drawImage(ground, 0, canvas.height - 495, canvas.width, 80); // ÎïÖ Î∞∞Í≤Ω

      // ÏùºÏ†ï Ï£ºÍ∏∞Î°ú Ìä∏Î¶¨ ÏÉùÏÑ± (1~2Í∞ú ÎûúÎç§ ÏÉùÏÑ±)
      if (timer % 80 === 0) {
        const numObstacles = Math.floor(Math.random() * 2) + 1;
        for (let i = 0; i < numObstacles; i++) {
          const tree = new Obstacle();
          if (numObstacles === 2) {
            tree.x += i * 30; // Îëê Í∞úÏùò Ïû•Ïï†Î¨ºÏù¥ Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù X ÏúÑÏπòÎ•º Î≥ÄÍ≤Ω
          }
          trees.push(tree);
        }
      }

      // Ìä∏Î¶¨ Ïù¥Îèô Î∞è Í∑∏Î¶¨Í∏∞
      trees.forEach((tree, index, array) => {
        if (tree.x < 0) {
          array.splice(index, 1);
        }
        tree.x -= 4;
        crush(santa, tree);
        tree.draw();
      });

      // Ï†êÌîÑ Î°úÏßÅ
      if (isJumping) {
        santa.y -= 4;
        jumptimer++;
      }

      if (!isJumping && santa.y < 200) {
        santa.y += 4;
      }

      if (jumptimer > 30) {
        isJumping = false;
        jumptimer = 0;
        scoreRef.current += 1;
        setScore(scoreRef.current);
      }

      // Ï∞©ÏßÄ Ïó¨Î∂Ä ÌôïÏù∏
      if (santa.y >= 200) {
        isJumping = false; // Ï∞©ÏßÄ ÏôÑÎ£å
      }

      santa.draw();
    };

    // ÌÇ§ ÏûÖÎ†• Ï≤òÎ¶¨
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!gameStarted) {
        setGameStarted(true); // Í≤åÏûÑ ÏãúÏûë
      }

      if (e.code === 'Space' && !isJumping && santa.y >= 200) {
        isJumping = true;
      }
    };

    document.addEventListener('keydown', handleKeyDown);

    // Í≤åÏûÑ ÏãúÏûë
    frame();

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [gameStarted]);

  return (
    <div className="flex flex-col items-center justify-center">
      <h1>Score: {score}</h1>
      {!gameStarted && (
        <div className="flex flex-col items-center justify-center text-2xl text-black">
          <img src={Santa} alt="ÏÇ∞ÌÉÄ" className="w-32 h-32 my-10" />
          Press any key to start
        </div>
      )}
      <canvas id="canvas" />
    </div>
  );
};

export default Dino;
